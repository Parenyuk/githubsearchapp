{"version":3,"sources":["components/SearchInput/searchInput.module.scss","components/CardList/Card/card.module.scss","components/Main/main.module.scss","components/CardList/cardList.module.scss","components/Header/header.module.scss","assets/images/logo.png","components/Header/Header.tsx","api/api.ts","redux/SearchRepositoriesReducer.ts","components/SearchInput/SearchInput.tsx","components/SearchNameHistoryBlock/SearchNameHistoryBlock.tsx","components/CardList/Card/Card.tsx","components/CardList/CardList.tsx","components/Main/Main.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","common/utils/localStorage.ts","index.tsx"],"names":["module","exports","Header","className","s","header","bottomLine","linkLogo","href","src","logo","alt","title","instance","axios","create","baseURL","githubApi","searchValue","get","SET_SEARCH_REPOSITORIES","SET_HISTORY_SEARCH_REPOSITORIES","SET_ERROR","initialState","repositoriesDataArray","arraySearchValue","setError","actions","type","errorMessage","SearchInput","setSearchValue","error","useSelector","state","searchRepositoriesPage","dispatch","useDispatch","delayedQuery","_debounce","a","response","data","statusCode","status","searchRepositoriesTC","useEffect","cancel","value","onChange","e","currentTarget","searchInput","SearchNameHistoryBlock","searchHistory","map","name","id","Card","language","description","card","CardList","repositoriesArray","item","cardList","Main","content","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","slice","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3c8c011.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"searchInput_wrapper__2lNTV\",\"searchInput\":\"searchInput_searchInput__3moLN\",\"error\":\"searchInput_error__3fcU6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"card_wrapper__4m2TO\",\"card\":\"card_card__1CNek\",\"title\":\"card_title__3M5lS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"main_wrapper__Fv8Bo\",\"content\":\"main_content__2T4dF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"cardList_wrapper__2qHoT\",\"cardList\":\"cardList_cardList__1jhnB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"header_wrapper__2WCqf\",\"header\":\"header_header__367Ua\",\"bottomLine\":\"header_bottomLine__a5sUF\",\"linkLogo\":\"header_linkLogo__2RU5n\",\"logo\":\"header_logo__1DtyH\",\"title\":\"header_title__4YncC\"};","export default __webpack_public_path__ + \"static/media/logo.17f18d0e.png\";","import React from 'react';\r\nimport logo from './../../assets/images/logo.png'\r\nimport s from './header.module.scss'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.bottomLine}>\r\n                <a className={s.linkLogo} href={'/'}>\r\n                    <img src={logo} alt={'logo'} className={s.logo} />\r\n                </a>\r\n                <span className={s.title}>\r\n                Github users search app\r\n                </span>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nimport {GithubResponseDataType} from '../services/types';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.github.com/'\r\n})\r\n\r\nexport const githubApi = {\r\n    setSearchRepositories(searchValue: string) {\r\n        return instance.get<GithubResponseDataType>(`users/${searchValue}/repos`)\r\n    },\r\n}\r\n\r\n","import {AppStateType, InferActionTypes} from './store';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {githubApi} from '../api/api';\r\nimport {GithubResponseDataType} from '../services/types';\r\n\r\nconst SET_SEARCH_REPOSITORIES = 'SEARCH_REPOSITORIES_REDUCER/SET_SEARCH_REPOSITORIES';\r\nconst SET_HISTORY_SEARCH_REPOSITORIES = 'SEARCH_REPOSITORIES_REDUCER/SET_HISTORY_SEARCH_REPOSITORIES';\r\nconst SET_ERROR = 'SEARCH_REPOSITORIES_REDUCER/SET_ERROR'\r\n\r\nlet initialState = {\r\n    repositoriesDataArray: [] as GithubResponseDataType,\r\n    arraySearchValue: [] as Array<string>,\r\n    setError: null as null | string\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const searchRepositoriesReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_SEARCH_REPOSITORIES:\r\n            return {...state, repositoriesDataArray: action.repositoriesDataArray}\r\n        case SET_HISTORY_SEARCH_REPOSITORIES: {\r\n            return {\r\n                ...state, arraySearchValue: [...state.arraySearchValue.slice(-4), action.searchValue + ' ']\r\n            }\r\n        }\r\n        case SET_ERROR: {\r\n            return {...state, setError: action.errorMessage}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = InferActionTypes<typeof actions>;\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>;\r\n\r\nexport const actions = {\r\n    searchRepositoriesAC: (repositoriesDataArray: GithubResponseDataType) => {\r\n        return ({type: SET_SEARCH_REPOSITORIES, repositoriesDataArray} as const)\r\n    },\r\n    searchRepositoriesHistoryAC: (searchValue: string) => {\r\n        return ({type: SET_HISTORY_SEARCH_REPOSITORIES, searchValue} as const)\r\n    },\r\n    setError: (errorMessage: string | null) => {\r\n        return ({type: SET_ERROR, errorMessage} as const)\r\n    }\r\n}\r\n\r\nexport const searchRepositoriesTC = (searchValue: string): ThunkType => async (dispatch: ThunkDispatch<AppStateType, unknown, ActionType>) => {\r\n    dispatch(actions.searchRepositoriesHistoryAC(searchValue))\r\n    try {\r\n        if (searchValue) {\r\n            const response = await githubApi.setSearchRepositories(searchValue);\r\n            dispatch(actions.searchRepositoriesAC(response.data))\r\n            dispatch(actions.setError(null))\r\n        }\r\n        else {\r\n            dispatch(actions.setError(null))\r\n        }\r\n    } catch (e) {\r\n        let statusCode = e.response?.status\r\n\r\n        if (statusCode === 403) {\r\n            dispatch(actions.setError('error'))\r\n        } else if ((statusCode === 401) || (statusCode === 404)) {\r\n            dispatch(actions.setError('Sorry, no matches.'))\r\n        } else {\r\n            dispatch(actions.setError('some error'))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect} from 'react';\r\nimport s from './searchInput.module.scss';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport _debounce from 'lodash.debounce';\r\nimport {searchRepositoriesTC} from '../../redux/SearchRepositoriesReducer';\r\n\r\ntype PropsType = {\r\n    searchValue: string\r\n    setSearchValue: (s: string) => void\r\n}\r\n\r\nexport const SearchInput: React.FC<PropsType> = ({searchValue, setSearchValue}) => {\r\n\r\n    const error = useSelector<AppStateType, null | string>(state => state.searchRepositoriesPage?.setError)\r\n\r\n    const changeSearchValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setSearchValue(e.currentTarget.value)\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const dispatchThunk = () => {\r\n        dispatch(searchRepositoriesTC(searchValue))\r\n\r\n    }\r\n\r\n    const delayedQuery = _debounce(dispatchThunk, 1500);\r\n\r\n     useEffect(() => {\r\n         if (searchValue) {\r\n             delayedQuery();\r\n         }\r\n        return delayedQuery.cancel;\r\n     }, [searchValue, delayedQuery]);\r\n\r\n    return (\r\n        <>\r\n            <input value={searchValue} onChange={changeSearchValue} className={s.searchInput} type={'text'} />\r\n            { error ? <div className={s.error}>{error}</div> : ' '  }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport './searchNameHistoryBlock.scss';\r\n\r\nexport const SearchNameHistoryBlock = () => {\r\n\r\n    const arraySearchValue = useSelector<AppStateType, Array<string>>(state => state.searchRepositoriesPage.arraySearchValue)\r\n\r\n    const searchHistory = arraySearchValue\r\n        .map((name: string, id) => {\r\n            return <div key={id}>{name}</div>\r\n        })\r\n\r\n    return (\r\n        <>\r\n            <div className={'searchHistoryTitle'}>Search history:</div>\r\n            <div className={'arraySearchValue'}>\r\n                {searchHistory}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './card.module.scss'\r\n\r\ntype PropsType = {\r\n    name: string\r\n    language: string\r\n    description: null | string\r\n}\r\n\r\nexport const Card: React.FC<PropsType> = ({name, language, description}) => {\r\n    return (\r\n        <div className={s.card}>\r\n            <h3 className={s.title}>{name}</h3>\r\n            <p>Language: {language}</p>\r\n            <p>Description: {description}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {GithubResponseDataType, ResponseDataType} from '../../services/types';\r\nimport {Card} from './Card/Card';\r\nimport s from './cardList.module.scss'\r\n\r\nexport const CardList = () => {\r\n\r\n    const repositoriesDataArray = useSelector<AppStateType, GithubResponseDataType>(state =>\r\n        state.searchRepositoriesPage.repositoriesDataArray)\r\n\r\n    const repositoriesArray = repositoriesDataArray?.map((item: ResponseDataType ) => {\r\n            return (\r\n                <Card key={item.id} name={item.name} language={item.language} description={item.description}/>\r\n                )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className={s.cardList}>\r\n            {repositoriesArray}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './main.module.scss'\r\nimport {SearchInput} from '../SearchInput/SearchInput';\r\nimport {SearchNameHistoryBlock} from '../SearchNameHistoryBlock/SearchNameHistoryBlock';\r\nimport {CardList} from '../CardList/CardList';\r\n\r\ntype PropsType = {\r\n    searchValue: string;\r\n    setSearchValue: (el: string) => void\r\n}\r\n\r\nexport const Main: React.FC<PropsType> = ({searchValue, setSearchValue}) => {\r\n    return (\r\n        <section className={s.content}>\r\n            <div>\r\n                <SearchInput searchValue={searchValue} setSearchValue={setSearchValue}\r\n                />\r\n                <SearchNameHistoryBlock/>\r\n            </div>\r\n            <CardList/>\r\n        </section>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\nimport './app.scss';\nimport {Header} from './components/Header/Header';\nimport {Main} from './components/Main/Main';\n\nconst App = () => {\n    const [searchValue, setSearchValue] = useState<string>('')\n\n    return (\n        <div className='app'>\n            <Header/>\n            <Main searchValue={searchValue} setSearchValue={setSearchValue} />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {loadState, saveState} from '../common/utils/localStorage';\r\nimport {searchRepositoriesReducer} from './SearchRepositoriesReducer';\r\n\r\n\r\n\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        searchRepositoriesPage: searchRepositoriesReducer,\r\n    }\r\n)\r\nexport type RootReducerType = typeof rootReducer;\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nconst persistedState = loadState();\r\nexport const store = createStore(\r\n    rootReducer, persistedState, applyMiddleware(thunk)\r\n);\r\nstore.subscribe(() => {\r\n    saveState({\r\n        searchRepositoriesPage: store.getState().searchRepositoriesPage\r\n    });\r\n}); // add Local Storage to project\r\n","import {AppStateType} from '../../redux/store';\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}